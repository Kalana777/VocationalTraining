//Q1
//Memento
//The states of the contestants has to be stored and recovered when needed by game manager. 
//So memento pattern will satisfy this need

//Q2
//Flyweight
//maintains intrinsic state and provides methods to manipulate extrinsic state. So we can keep a set of common attributes
//and different position states easily with memory efficiency
package gamedemo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

class State{
    private int[] position;
    public State(int x,int y){
        position=new int[2];
        position[0]=x;
        position[1]=y;
    }
    public int[] getPosition(){
        return position;
    }
}
class Memento { 
	private State state; 
	public Memento(State state){ 
		this.state = state;
	} 
	public State getState(){ 
		return state;
	 } 
}
class ContestantFactory {
    private static ContestantFlyweight contestant;
    public static ContestantFlyweight getContestant(){
    // this is a singleton 
    // if there is no contestant 
        if(contestant==null){ 
            contestant = new ContestantFlyweightImp();
        }
        return contestant;
    }
}
interface ContestantFlyweight {
    public void moveContestant(int preX, int preY,int newX, int newY);
}
class ContestantFlyweightImp implements ContestantFlyweight {
    private Object contestantGraphicalRepresentation;
    public void moveContestant(int preX, int preY,int newX, int newY) {
            // delete contestant representation from previous location 
            // then render contestant representation in new location 	
    }
}
class Contestant{
    private State state;
    private ContestantFlyweight contestant = ContestantFactory.getContestant();
    public void moveContestant(int x, int y){
        // here the actual rendering is handled by the flyweight object 
            contestant.moveContestant(state.getPosition()[0], state.getPosition()[1], x,y);

            state.getPosition()[0] = x;
            state.getPosition()[1] = y;
    }

    public void setState(State state){
        this.state=state;
    }
    public State getState(){
        return state;
    }
    
    public Memento saveStateToMemento(){ 
	return new Memento(state); 
    } 
    public void getStateFromMemento(Memento memento){ 
	state = memento.getState();
    }
    
}


class GameManager{
    private HashMap<Contestant,ArrayList<Memento>> stateList;
    
    public GameManager(){
        stateList=new HashMap<Contestant,ArrayList<Memento>>();
    }
    public void addContestant(Contestant contestant){
        stateList.put(contestant,new ArrayList<>());
    }
    public void savetoMemento(Contestant contestant){
        ArrayList<Memento>list=stateList.get(contestant);
        list.add(contestant.saveStateToMemento());
        stateList.put(contestant,list );
    }
   public void restoreState(Contestant contestant){
       ArrayList<Memento>list=stateList.get(contestant);
       contestant.getStateFromMemento(list.get(0));
    }
}
public class Gamedemo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        State state1= new State(1,3);
        State state2= new State(2,4);
        State state3= new State(3,5);
        State state4= new State(7,5);
        
        
        
        Contestant contestantList []={new Contestant(),new Contestant(),new Contestant()};
        
        contestantList[0].setState(state1);
        contestantList[1].setState(state2);
        contestantList[2].setState(state3);
       
        
        GameManager gm=new GameManager();
        gm.addContestant(contestantList[0]);
        gm.addContestant(contestantList[1]);
        gm.addContestant(contestantList[2]);
        
       	gm.savetoMemento(contestantList[0]);
       	gm.savetoMemento(contestantList[1]);
       	gm.savetoMemento(contestantList[2]);        
        contestantList[0].setState(state4);
        System.out.println("Contestant state:" +contestantList[0].getState().getPosition());
        gm.restoreState(contestantList[0]);
        System.out.println("Contestant state:" +contestantList[0].getState().getPosition());
    }
    
}





Q2)
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compositedemo;


import java.util.ArrayList;

interface Component {
    public void traverse(IVisitor visitor);
    
}

abstract class Composite implements Component{  
	   private ArrayList<Component>  parts = new ArrayList<Component>(); 
	   private int total    = 0;
	   private int value;
	   public Composite( int val )    {
		   value = val; 
		}
	   public void add( Component c ) {
		   total++;
		   parts.add(c);		   
	   } 
	   public void traverse(IVisitor visitor) {                                 
	      visitor.Visit(this);
	      for (int i=0; i < total; i++){	    	 
	          (parts.get(i)).traverse(visitor);  
	      }
	} 
	public int getValue(){return value;} 
	   
}

class Primitive implements Component {       
	   private int value;
	   public Primitive( int val ) { value = val; }
	   public void traverse(IVisitor visitor)      { visitor.Visit(this);  }
	   public int getValue(){return value;}
}

interface IVisitor
{
  public void Visit(Composite composite);
  public void Visit(Primitive primitive);
}
class Column extends Composite {
	   public Column( int val ) { super( val ); }
	   public void traverse(IVisitor visitor) {
	      System.out.print( "Col" );
	      super.traverse(visitor);
	}  }
	
class Row extends Composite {               
	   public Row( int val ) { super( val ); }  
	   public void traverse(IVisitor visitor) {                 
	      System.out.print( "Row" );            
	      super.traverse(visitor);
	}  
}
class Visitor implements IVisitor{
    private int compositeNumber=0;
    private int primitiveNumber=0;

    @Override
    public void Visit(Composite composite) {
        System.out.println(composite.getValue()+"  ");
        compositeNumber++;
    }

    @Override
    public void Visit(Primitive primitive) {
        System.out.println(primitive.getValue()+"  ");
        primitiveNumber++;   
    }
    
}


/*source https://sourcemaking.com/design_patterns/composite/java/2*/
public class CompositeDemo {
	   public static void main( String[] args ) {
	      IVisitor visitor=new Visitor();
	      Composite first  = new Row( 1 );        
	      Composite second = new Column( 2 );     
	      Composite third  = new Column( 3 );     
	      Composite fourth = new Column( 4 );        
	      Composite fifth  = new Column( 5 );        
	      first.add( second );                    
	      first.add( third  );                    
	      third.add( fourth );                    
	      third.add( fifth  );                    
	      first.add(  new Primitive( 6 ) );       
	      second.add( new Primitive( 7 ) );       
	      third.add(  new Primitive( 8 ) );       
	      fourth.add( new Primitive( 9 ) );       
	      fifth.add(  new Primitive(10 ) );       
	      first.traverse(visitor);                       
	}  
}
	
	